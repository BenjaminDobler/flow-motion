// Types for builder: @angular/build:application

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */



/**
 * Application builder target options
 */
export interface AngularBuildApplication {
  /**
   * List of static application assets.
   */
  assets?: AssetPattern[];
  /**
   * The full path for the browser entry point to the application, relative to the current workspace.
   */
  browser?: string;
  /**
   * The full path for the server entry point to the application, relative to the current workspace.
   */
  server?: string | false;
  /**
   * A list of polyfills to include in the build. Can be a full path for a file, relative to the current workspace or module specifier. Example: 'zone.js'.
   */
  polyfills?: string[];
  /**
   * The full path for the TypeScript configuration file, relative to the current workspace.
   */
  tsConfig: string;
  /**
   * Customize the base path for the URLs of resources in 'index.html' and component stylesheets. This option is only necessary for specific deployment scenarios, such as with Angular Elements or when utilizing different CDN locations.
   */
  deployUrl?: string;
  /**
   * Security features to protect against XSS and other common attacks
   */
  security?: {
    /**
     * Enables automatic generation of a hash-based Strict Content Security Policy (https://web.dev/articles/strict-csp#choose-hash) based on scripts in index.html. Will default to true once we are out of experimental/preview phases.
     */
    autoCsp?:
      | {
          /**
           * Include the `unsafe-eval` directive (https://web.dev/articles/strict-csp#remove-eval) in the auto-CSP. Please only enable this if you are absolutely sure that you need to, as allowing calls to eval will weaken the XSS defenses provided by the auto-CSP.
           */
          unsafeEval?: boolean;
        }
      | boolean;
  };
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  styles?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors.
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
    /**
     * Options to pass to the sass preprocessor.
     */
    sass?: {
      /**
       * A set of deprecations to treat as fatal. If a deprecation warning of any provided type is encountered during compilation, the compiler will error instead. If a Version is provided, then all deprecations that were active in that compiler version will be treated as fatal.
       */
      fatalDeprecations?: string[];
      /**
       *  A set of active deprecations to ignore. If a deprecation warning of any provided type is encountered during compilation, the compiler will ignore it instead.
       */
      silenceDeprecations?: string[];
      /**
       * A set of future deprecations to opt into early. Future deprecations passed here will be treated as active by the compiler, emitting warnings as necessary.
       */
      futureDeprecations?: string[];
    };
  };
  /**
   * Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime. Note: `@foo/bar` marks all paths within the `@foo/bar` package as external, including sub-paths like `@foo/bar/baz`.
   */
  externalDependencies?: string[];
  /**
   * Automatically clear the terminal screen during rebuilds.
   */
  clearScreen?: boolean;
  /**
   * Enables optimization of the build output. Including minification of scripts and styles, tree-shaking, dead-code elimination, inlining of critical CSS and fonts inlining. For more information, see https://angular.dev/reference/configs/workspace-config#optimization-configuration.
   */
  optimization?:
    | {
        /**
         * Enables optimization of the scripts output.
         */
        scripts?: boolean;
        /**
         * Enables optimization of the styles output.
         */
        styles?:
          | {
              /**
               * Minify CSS definitions by removing extraneous whitespace and comments, merging identifiers and minimizing values.
               */
              minify?: boolean;
              /**
               * Extract and inline critical CSS definitions to improve first paint time.
               */
              inlineCritical?: boolean;
              /**
               * Remove comments in global CSS that contains '@license' or '@preserve' or that starts with '//!' or '/*!'.
               */
              removeSpecialComments?: boolean;
            }
          | boolean;
        /**
         * Enables optimization for fonts. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.
         */
        fonts?:
          | {
              /**
               * Reduce render blocking requests by inlining external Google Fonts and Adobe Fonts CSS definitions in the application's HTML index file. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.
               */
              inline?: boolean;
            }
          | boolean;
      }
    | boolean;
  /**
   * Defines the type of loader to use with a specified file extension when used with a JavaScript `import`. `text` inlines the content as a string; `binary` inlines the content as a Uint8Array; `file` emits the file and provides the runtime location of the file; `dataurl` inlines the content as a data URL with best guess of MIME type; `base64` inlines the content as a Base64-encoded string; `empty` considers the content to be empty and not include it in bundles.
   */
  loader?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^\.\S+$".
     */
    [k: string]: 'text' | 'binary' | 'file' | 'dataurl' | 'base64' | 'empty';
  };
  /**
   * Defines global identifiers that will be replaced with a specified constant value when found in any JavaScript or TypeScript code including libraries. The value will be used directly. String values must be put in quotes. Identifiers within Angular metadata such as Component Decorators will not be replaced.
   */
  define?: {
    [k: string]: string;
  };
  /**
   * Custom package resolution conditions used to resolve conditional exports/imports. Defaults to ['module', 'development'/'production']. The following special conditions are always present if the requirements are satisfied: 'default', 'import', 'require', 'browser', 'node'.
   */
  conditions?: string[];
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: FileReplacement[];
  /**
   * Specify the output path relative to workspace root.
   */
  outputPath?:
    | {
        /**
         * Specify the output path relative to workspace root.
         */
        base: string;
        /**
         * The output directory name of your browser build within the output path base. Defaults to 'browser'.
         */
        browser?: string;
        /**
         * The output directory name of your server build within the output path base. Defaults to 'server'.
         */
        server?: string;
        /**
         * The output directory name of your media files within the output browser directory. Defaults to 'media'.
         */
        media?: string;
      }
    | string;
  /**
   * Build using Ahead of Time compilation.
   */
  aot?: boolean;
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Output source maps used for error reporting tools.
         */
        hidden?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
        /**
         * Output original source content for files within the source map.
         */
        sourcesContent?: boolean;
      }
    | boolean;
  /**
   * Base url for the application being built.
   */
  baseHref?: string;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * How to handle missing translations for i18n.
   */
  i18nMissingTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * How to handle duplicate translations for i18n.
   */
  i18nDuplicateTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * Translate the bundles in one or more locales.
   */
  localize?: boolean | [string, ...string[]];
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Define the output filename cache-busting hashing mode.
   */
  outputHashing?: 'none' | 'all' | 'media' | 'bundles';
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Delete the output path before building.
   */
  deleteOutputPath?: boolean;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Extract all licenses in a separate file.
   */
  extractLicenses?: boolean;
  /**
   * Use file name for lazy loaded chunks.
   */
  namedChunks?: boolean;
  /**
   * Enables the use of subresource integrity validation.
   */
  subresourceIntegrity?: boolean;
  /**
   * Generates a service worker configuration.
   */
  serviceWorker?: string | false;
  /**
   * Configures the generation of the application's HTML index.
   */
  index?:
    | string
    | {
        /**
         * The path of a file to use for the application's generated HTML index.
         */
        input: string;
        /**
         * The output path of the application's generated HTML index file. The full provided path will be used and will be considered relative to the application's configured output path.
         */
        output?: string;
        /**
         * Generates 'preload', 'modulepreload', and 'preconnect' link elements for initial application files and resources.
         */
        preloadInitial?: boolean;
        [k: string]: unknown;
      }
    | false;
  /**
   * Generates a 'stats.json' file which can be analyzed with https://esbuild.github.io/analyze/.
   */
  statsJson?: boolean;
  /**
   * Budget thresholds to ensure parts of your application stay within boundaries which you set.
   */
  budgets?: Budget[];
  /**
   * TypeScript configuration for Web Worker modules.
   */
  webWorkerTsConfig?: string;
  /**
   * Define the crossorigin attribute setting of elements that provide CORS support.
   */
  crossOrigin?: 'none' | 'anonymous' | 'use-credentials';
  /**
   * A list of CommonJS or AMD packages that are allowed to be used without a build time warning. Use `'*'` to allow all.
   */
  allowedCommonJsDependencies?: string[];
  /**
   * Prerender (SSG) pages of your application during build time.
   */
  prerender?:
    | boolean
    | {
        /**
         * The path to a file that contains a list of all routes to prerender, separated by newlines. This option is useful if you want to prerender routes with parameterized URLs.
         */
        routesFile?: string;
        /**
         * Whether the builder should process the Angular Router configuration to find all unparameterized routes and prerender them.
         */
        discoverRoutes?: boolean;
      };
  /**
   * Server side render (SSR) pages of your application during runtime.
   */
  ssr?:
    | boolean
    | {
        /**
         * The server entry-point that when executed will spawn the web server.
         */
        entry?: string;
        /**
         * Specifies the platform for which the server bundle is generated. This affects the APIs and modules available in the server-side code.
         *
         * - `node`:  (Default) Generates a bundle optimized for Node.js environments.
         * - `neutral`: Generates a platform-neutral bundle suitable for environments like edge workers, and other serverless platforms. This option avoids using Node.js-specific APIs, making the bundle more portable.
         *
         * Please note that this feature does not provide polyfills for Node.js modules. Additionally, it is experimental, and the schematics may undergo changes in future versions.
         */
        experimentalPlatform?: 'node' | 'neutral';
      };
  /**
   * Generates an application shell during build time.
   */
  appShell?: boolean;
  /**
   * Defines the build output target. 'static': Generates a static site for deployment on any static hosting service. 'server': Produces an application designed for deployment on a server that supports server-side rendering (SSR).
   */
  outputMode?: 'static' | 'server';
}
export interface FileReplacement {
  replace: string;
  with: string;
}
export interface Budget {
  /**
   * The type of budget.
   */
  type: 'all' | 'allScript' | 'any' | 'anyScript' | 'anyComponentStyle' | 'bundle' | 'initial';
  /**
   * The name of the bundle.
   */
  name?: string;
  /**
   * The baseline size for comparison.
   */
  baseline?: string;
  /**
   * The maximum threshold for warning relative to the baseline.
   */
  maximumWarning?: string;
  /**
   * The maximum threshold for error relative to the baseline.
   */
  maximumError?: string;
  /**
   * The minimum threshold for warning relative to the baseline.
   */
  minimumWarning?: string;
  /**
   * The minimum threshold for error relative to the baseline.
   */
  minimumError?: string;
  /**
   * The threshold for warning relative to the baseline (min & max).
   */
  warning?: string;
  /**
   * The threshold for error relative to the baseline (min & max).
   */
  error?: string;
}

// Types for builder: @angular/build:dev-server

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Dev Server target options for Build Facade.
 */
export interface AngularBuildDevServer {
  /**
   * A build builder target to serve in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget: string;
  /**
   * Port to listen on.
   */
  port?: number;
  /**
   * Host to listen on.
   */
  host?: string;
  /**
   * Proxy configuration file. For more information, see https://angular.dev/tools/cli/serve#proxying-to-a-backend-server.
   */
  proxyConfig?: string;
  /**
   * Serve using HTTPS.
   */
  ssl?: boolean;
  /**
   * SSL key to use for serving HTTPS.
   */
  sslKey?: string;
  /**
   * SSL certificate to use for serving HTTPS.
   */
  sslCert?: string;
  /**
   * The hosts that the development server will respond to. This option sets the Vite option of the same name. For further details: https://vite.dev/config/server-options.html#server-allowedhosts
   */
  allowedHosts?: string[] | boolean;
  /**
   * Custom HTTP headers to be added to all responses.
   */
  headers?: {
    [k: string]: string;
  };
  /**
   * Opens the url in default browser.
   */
  open?: boolean;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Whether to reload the page on change, using live-reload.
   */
  liveReload?: boolean;
  /**
   * The pathname where the application will be served.
   */
  servePath?: string;
  /**
   * Enable hot module replacement. Defaults to the value of 'liveReload'. Currently, only global and component stylesheets are supported.
   */
  hmr?: boolean;
  /**
   * Rebuild on change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Activate debugging inspector. This option only has an effect when 'SSR' or 'SSG' are enabled.
   */
  inspect?: string | boolean;
  /**
   * Enable and control the Vite-based development server's prebundling capabilities. To enable prebundling, the Angular CLI cache must also be enabled.
   */
  prebundle?:
    | boolean
    | {
        /**
         * List of package imports that should not be prebundled by the development server. The packages will be bundled into the application code itself. Note: specifying `@foo/bar` marks all paths within the `@foo/bar` package as excluded, including sub-paths like `@foo/bar/baz`.
         */
        exclude: string[];
      };
}

// Types for builder: @angular/build:extract-i18n

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Extract i18n target options for Build Facade.
 */
export interface AngularBuildExtractI18N {
  /**
   * A builder target to extract i18n messages in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget?: string;
  /**
   * Output format for the generated file.
   */
  format?: 'xmb' | 'xlf' | 'xlif' | 'xliff' | 'xlf2' | 'xliff2' | 'json' | 'arb' | 'legacy-migrate';
  /**
   * Log progress to the console.
   */
  progress?: boolean;
  /**
   * Path where output will be placed.
   */
  outputPath?: string;
  /**
   * Name of the file to output.
   */
  outFile?: string;
  /**
   * How to handle duplicate translations.
   */
  i18nDuplicateTranslation?: 'error' | 'warning' | 'ignore';
}

// Types for builder: @angular/build:karma

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type AssetPattern =
  | {
      /**
       * The pattern to match.
       */
      glob: string;
      /**
       * The input directory path in which to apply 'glob'. Defaults to the project root.
       */
      input: string;
      /**
       * Absolute path within the output.
       */
      output?: string;
      /**
       * An array of globs to ignore.
       */
      ignore?: string[];
    }
  | string;

/**
 * Karma target options for Build Facade.
 */
export interface AngularBuildKarma {
  /**
   * The name of the main entry-point file.
   */
  main?: string;
  /**
   * The name of the TypeScript configuration file.
   */
  tsConfig: string;
  /**
   * The name of the Karma configuration file.
   */
  karmaConfig?: string;
  /**
   * A list of polyfills to include in the build. Can be a full path for a file, relative to the current workspace or module specifier. Example: 'zone.js'.
   */
  polyfills?: string[];
  /**
   * List of static application assets.
   */
  assets?: AssetPattern[];
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  styles?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors.
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
    /**
     * Options to pass to the sass preprocessor.
     */
    sass?: {
      /**
       * A set of deprecations to treat as fatal. If a deprecation warning of any provided type is encountered during compilation, the compiler will error instead. If a Version is provided, then all deprecations that were active in that compiler version will be treated as fatal.
       */
      fatalDeprecations?: string[];
      /**
       *  A set of active deprecations to ignore. If a deprecation warning of any provided type is encountered during compilation, the compiler will ignore it instead.
       */
      silenceDeprecations?: string[];
      /**
       * A set of future deprecations to opt into early. Future deprecations passed here will be treated as active by the compiler, emitting warnings as necessary.
       */
      futureDeprecations?: string[];
    };
  };
  /**
   * Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime.
   */
  externalDependencies?: string[];
  /**
   * Defines the type of loader to use with a specified file extension when used with a JavaScript `import`. `text` inlines the content as a string; `binary` inlines the content as a Uint8Array; `file` emits the file and provides the runtime location of the file; `dataurl` inlines the content as a data URL with best guess of MIME type; `base64` inlines the content as a Base64-encoded string; `empty` considers the content to be empty and not include it in bundles.
   */
  loader?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^\.\S+$".
     */
    [k: string]: 'text' | 'binary' | 'file' | 'dataurl' | 'base64' | 'empty';
  };
  /**
   * Defines global identifiers that will be replaced with a specified constant value when found in any JavaScript or TypeScript code including libraries. The value will be used directly. String values must be put in quotes. Identifiers within Angular metadata such as Component Decorators will not be replaced.
   */
  define?: {
    [k: string]: string;
  };
  /**
   * Globs of files to include, relative to project root.
   * There are 2 special cases:
   *  - when a path to directory is provided, all spec files ending ".spec.@(ts|tsx)" will be included
   *  - when a path to a file is provided, and a matching spec file exists it will be included instead.
   */
  include?: string[];
  /**
   * Globs of files to exclude, relative to the project root.
   */
  exclude?: string[];
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
      }
    | boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * Re-run tests when source files change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Override which browsers tests are run against. Set to `false` to not use any browser.
   */
  browsers?: string | false;
  /**
   * Output a code coverage report.
   */
  codeCoverage?: boolean;
  /**
   * Globs to exclude from code coverage.
   */
  codeCoverageExclude?: string[];
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: FileReplacement[];
  /**
   * Karma reporters to use. Directly passed to the karma runner.
   */
  reporters?: string[];
  /**
   * TypeScript configuration for Web Worker modules.
   */
  webWorkerTsConfig?: string;
  /**
   * Run tests using Ahead of Time compilation.
   */
  aot?: boolean;
}
export interface FileReplacement {
  replace: string;
  with: string;
}

// Types for builder: @angular/build:ng-packagr

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * ng-packagr target options for Build Architect. Use to build library projects.
 */
export interface AngularBuildNgPackagr {
  /**
   * The file path for the ng-packagr configuration file, relative to the current workspace.
   */
  project?: string;
  /**
   * The full path for the TypeScript configuration file, relative to the current workspace.
   */
  tsConfig?: string;
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
}

// Types for builder: @angular/build:unit-test

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CoverageReporters = 'html' | 'lcov' | 'lcovonly' | 'text' | 'text-summary' | 'cobertura' | 'json' | 'json-summary';

/**
 * Unit testing options for Angular applications.
 */
export interface AngularBuildUnitTest {
  /**
   * A build builder target to serve in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget: string;
  /**
   * The name of the TypeScript configuration file.
   */
  tsConfig: string;
  /**
   * The name of the test runner to use for test execution.
   */
  runner: 'karma' | 'vitest';
  /**
   * A list of browsers to use for test execution. If undefined, jsdom on Node.js will be used instead of a browser.
   *
   * @minItems 1
   */
  browsers?: [string, ...string[]];
  /**
   * Globs of files to include, relative to project root.
   * There are 2 special cases:
   *  - when a path to directory is provided, all spec files ending ".spec.@(ts|tsx)" will be included
   *  - when a path to a file is provided, and a matching spec file exists it will be included instead.
   */
  include?: string[];
  /**
   * Globs of files to exclude, relative to the project root.
   */
  exclude?: string[];
  /**
   * Re-run tests when source files change. Defaults to `true` in TTY environments and `false` otherwise.
   */
  watch?: boolean;
  /**
   * Initialize the test runner to support using the Node Inspector for test debugging.
   */
  debug?: boolean;
  /**
   * Output a code coverage report.
   */
  codeCoverage?: boolean;
  /**
   * Globs to exclude from code coverage.
   */
  codeCoverageExclude?: string[];
  /**
   * Reporters to use for code coverage results.
   */
  codeCoverageReporters?: (
    | CoverageReporters
    | [CoverageReporters]
    | [
        CoverageReporters,
        {
          [k: string]: unknown;
        },
      ]
  )[];
  /**
   * Test runner reporters to use. Directly passed to the test runner.
   */
  reporters?: string[];
  /**
   * TypeScript file that exports an array of Angular providers to use during test execution. The array must be a default export.
   */
  providersFile?: string;
  /**
   * A list of global setup and configuration files that are included before the test files. The application's polyfills are always included before these files. The Angular Testbed is also initialized prior to the execution of these files.
   */
  setupFiles?: string[];
}

// Types for builder: @angular-eslint/builder:lint

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * ESLint target options for Build Facade.
 */
export interface AngularEslintBuilderLint {
  /**
   * The name of the ESLint configuration file.
   */
  eslintConfig?: string;
  /**
   * Fixes linting errors (may overwrite linted files).
   */
  fix?: boolean;
  /**
   * Only check changed files.
   */
  cache?: boolean;
  /**
   * Path to the cache file or directory.
   */
  cacheLocation?: string;
  /**
   * File to write report to instead of the console.
   */
  outputFile?: string;
  /**
   * Output performance statistics for ESLint rules
   */
  stats?: boolean;
  /**
   * Strategy to use for detecting changed files in the cache.
   */
  cacheStrategy?: 'metadata' | 'content';
  /**
   * Succeeds even if there was linting errors.
   */
  force?: boolean;
  /**
   * Report errors only.
   */
  quiet?: boolean;
  /**
   * Number of warnings to trigger nonzero exit code.
   */
  maxWarnings?: number;
  /**
   * Hide output text.
   */
  silent?: boolean;
  /**
   * One or more files/dirs/globs to pass directly to ESLint's `lintFiles()` method.
   */
  lintFilePatterns: string[];
  /**
   * ESLint Output formatter (https://eslint.org/docs/user-guide/formatters).
   */
  format?: (
    | ('stylish' | 'compact' | 'codeframe' | 'unix' | 'visualstudio' | 'table' | 'checkstyle' | 'html' | 'jslint-xml' | 'json' | 'json-with-metadata' | 'junit' | 'tap')
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * The path of the `.eslintignore` file.
   */
  ignorePath?: string;
  /**
   * NOTE: eslintrc config only. The equivalent of the `--no-eslintrc` flag on the ESLint CLI, it is false by default
   */
  noEslintrc?: boolean;
  /**
   * NOTE: flat config only. The equivalent of the `--no-config-lookup` flag on the ESLint CLI, it is false by default
   */
  noConfigLookup?: boolean;
  /**
   * The equivalent of the `--rulesdir` flag on the ESLint CLI, it is an empty array by default
   */
  rulesdir?: string[];
  /**
   * The equivalent of the `--resolve-plugins-relative-to` flag on the ESLint CLI
   */
  resolvePluginsRelativeTo?: string;
  /**
   * The equivalent of the `--report-unused-disable-directives` flag on the ESLint CLI.
   */
  reportUnusedDisableDirectives?: 'off' | 'warn' | 'error';
}



type Task =
  | {
      builder: '@angular/build:application';
      options?: Partial<AngularBuildApplication>;
      configurations?: { [k: string]: Partial<AngularBuildApplication> };
      defaultConfiguration?: string;
    }
  | {
      builder: '@angular/build:dev-server';
      options?: Partial<AngularBuildDevServer>;
      configurations?: { [k: string]: Partial<AngularBuildDevServer> };
      defaultConfiguration?: string;
    }
  | {
      builder: '@angular/build:extract-i18n';
      options?: Partial<AngularBuildExtractI18N>;
      configurations?: { [k: string]: Partial<AngularBuildExtractI18N> };
      defaultConfiguration?: string;
    }
  | {
      builder: '@angular/build:karma';
      options?: Partial<AngularBuildKarma>;
      configurations?: { [k: string]: Partial<AngularBuildKarma> };
      defaultConfiguration?: string;
    }
  | {
      builder: '@angular/build:ng-packagr';
      options?: Partial<AngularBuildNgPackagr>;
      configurations?: { [k: string]: Partial<AngularBuildNgPackagr> };
      defaultConfiguration?: string;
    }
  | {
      builder: '@angular/build:unit-test';
      options?: Partial<AngularBuildUnitTest>;
      configurations?: { [k: string]: Partial<AngularBuildUnitTest> };
      defaultConfiguration?: string;
    }
  | {
      builder: '@angular-eslint/builder:lint';
      options?: Partial<AngularEslintBuilderLint>;
      configurations?: { [k: string]: Partial<AngularEslintBuilderLint> };
      defaultConfiguration?: string;
    };


export type Project = {
  root: string;
  sourceRoot: string;
  projectType: 'application' | 'library';
  prefix?: string;
  schematics?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  architect: {
    [k: string]: Task;
  }
};


export class Test {
  
}



